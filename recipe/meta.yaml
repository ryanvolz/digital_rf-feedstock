{% set version = "2.6.0" %}
{% set sha256 = "" %}

package:
  name: digital_rf
  version: {{ version }}

source:
  url: https://github.com/MITHaystack/digital_rf/archive/{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  detect_binary_files_with_prefix: True
  features:
    - vc9  # [win and py27]
    - vc10  # [win and py34]
    - vc14  # [win and py>=35]

requirements:
  build:
    - cheetah
    - cmake >=3.0
    - hdf5 1.8.18|1.8.18.*
    - numpy 1.8.*
    - pkgconfig
    - python >=2.7,<3
    - setuptools
    - toolchain
    - vc 9  # [win and py27]
    - vc 10  # [win and py34]
    - vc 14  # [win and py>=35]
  run:
    - dateutil
    - gnuradio  # [not win]
    - h5py
    - hdf5 1.8.18|1.8.18.*
    - matplotlib
    - numpy >=1.8
    - packaging
    - pandas
    - python >=2.7,<3
    - pytz
    - scipy
    - vc 9  # [win and py27]
    - vc 10  # [win and py34]
    - vc 14  # [win and py>=35]
    - watchdog

test:
  requires:
    - pytest >=3.0
  imports:
    - digital_rf
    - digital_rf.digital_rf_hdf5
    - gr_digital_rf  # [not win]
  source_files:
    - python/tests/*.py
    - python/examples/*.py
  commands:
    - pytest
    - python python/examples/example_write_digital_metadata.py
    - python python/examples/example_read_digital_metadata.py

about:
  home: https://github.com/MITHaystack/digital_rf
  license: BSD
  license_file: LICENSE
  summary: 'Work with data in the Digital RF and Digital Metadata formats.'
  description: |
    The Digital RF project encompasses a standardized HDF5 format for reading
    and writing of radio frequency data and the software for doing so. The
    format is designed to be self-documenting for data archive and to allow
    rapid random access for data processing. For details on the format, refer
    to the documentation.

    This suite of software includes libraries for reading and writing data in
    the Digital RF HDF5 format in C (``libdigital_rf``), Python
    (``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and
    MATLAB. It also contains the `thor` UHD radio recorder script, Python
    tools for managing and processing Digital RF data, example scripts that
    demonstrate basic usage, and example applications that encompass a
    complete data recording and processing chain for various use cases.

  doc_url: https://github.com/MITHaystack/digital_rf/tree/master/docs
  dev_url: https://github.com/MITHaystack/digital_rf

extra:
  recipe-maintainers:
    - ryanvolz
